{
  "address": "0x5908212C87b04a6Ee135B3E1C90eF572Baf554E5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokensAllowedPerAddress",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeWei",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hiddenURI",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_temporaryURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_percentageRoyalty",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_feeLink",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestIndex",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "requestedIndex",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "enterWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "exitWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTokensOwned",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hiddenURI",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hideURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "inWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listMintedTokensIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mapAddressToLatestTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mapAddressToTokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokensAllowedPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedTokensSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "processingMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomIndex",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxTokensMintablePerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeWei",
          "type": "uint256"
        }
      ],
      "name": "setMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_percentageRoyalty",
          "type": "uint256"
        }
      ],
      "name": "setRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokensRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06c9f28d8000245f53a311e8a90acb99e9de4e480a8c2b4177ef837ff6b61de5",
  "receipt": {
    "to": null,
    "from": "0x614539062F7205049917e03ec4C86FF808F083cb",
    "contractAddress": "0x5908212C87b04a6Ee135B3E1C90eF572Baf554E5",
    "transactionIndex": 2,
    "gasUsed": "5685630",
    "logsBloom": "0x00000000000000020000000001000000000000000000000000800000000000000000000000000000000000000000000000008000000000000000000000000000000001000000000000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000020000000000000000000000000000000000000000000200000000000000020000000000000000001000000000000000000000100004000000000000000000001000000000000000000000000000000100000000020000000000000000000000000020000000000000000000400000000000000100000",
    "blockHash": "0xa519720b7cdbcf7c64a2a63111c9aeabb35eb0cd2570678949fb6b6647d177cd",
    "transactionHash": "0x06c9f28d8000245f53a311e8a90acb99e9de4e480a8c2b4177ef837ff6b61de5",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 21497301,
        "transactionHash": "0x06c9f28d8000245f53a311e8a90acb99e9de4e480a8c2b4177ef837ff6b61de5",
        "address": "0x5908212C87b04a6Ee135B3E1C90eF572Baf554E5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000614539062f7205049917e03ec4c86ff808f083cb"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xa519720b7cdbcf7c64a2a63111c9aeabb35eb0cd2570678949fb6b6647d177cd"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 21497301,
        "transactionHash": "0x06c9f28d8000245f53a311e8a90acb99e9de4e480a8c2b4177ef837ff6b61de5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000614539062f7205049917e03ec4c86ff808f083cb",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003c9926ad6c44000000000000000000000000000000000000000000000000000600fc9a18df060000000000000000000000000000000000000000000000020d19109f31325d043000000000000000000000000000000000000000000000000005c463736b72c20000000000000000000000000000000000000000000000020d194d3857dfc94830",
        "logIndex": 9,
        "blockHash": "0xa519720b7cdbcf7c64a2a63111c9aeabb35eb0cd2570678949fb6b6647d177cd"
      }
    ],
    "blockNumber": 21497301,
    "cumulativeGasUsed": "6084716",
    "status": 1,
    "byzantium": true
  },
  "args": [
    128,
    3,
    "100000000000000000000",
    false,
    "https://bafybeie7tfvkzrdf2n4f4sutqpu27gdhtbbwcwv74otbpzqmr2x3i4dmq4.ipfs.dweb.link/",
    "https://bafybeiexrjqcdzquhnf2uj5rzhavlqg2exerqjzafoi3c4ub6tn3xez4sq.ipfs.dweb.link/hidden.json",
    10,
    "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
    "100000000000000"
  ],
  "solcInputHash": "d7c8551dedbb78c2214d5a90aedca250",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensAllowedPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeWei\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hiddenURI\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_temporaryURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_percentageRoyalty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_feeLink\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestIndex\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"requestedIndex\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"enterWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"exitWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokensOwned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hiddenURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hideURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listMintedTokensIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapAddressToLatestTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapAddressToTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensAllowedPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTokensSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"processingMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomIndex\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensMintablePerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeWei\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentageRoyalty\",\"type\":\"uint256\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_tokenId\":\"- the NFT asset queried for royalty information\",\"_value\":\"- the sale price of the NFT asset specified by _tokenId\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for value sale price\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CuriousKid.sol\":\"CuriousKid\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/CuriousKid.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./EIP2981/ERC2981ContractWideRoyalties.sol\\\";\\nimport \\\"./ERC721URIStorageV2.sol\\\";\\n\\ncontract CuriousKid is\\n    ERC721URIStorageV2,\\n    VRFConsumerBase,\\n    Pausable,\\n    Ownable,\\n    ReentrancyGuard,\\n    ERC2981ContractWideRoyalties\\n{\\n    using Strings for uint256;\\n\\n    uint256 public totalTokensRemaining;\\n    uint256 public maxTokensAllowedPerAddress;\\n    uint256 public feeWei;\\n    uint256[] public listMintedTokensIds;\\n    bool public hiddenURI;\\n    uint256 internal newTokenId;\\n    string internal baseURI;\\n    string internal temporaryURI;\\n    bytes32 internal keyHash;\\n    uint256 internal feeLink;\\n\\n    mapping(bytes32 => address) internal mapRequestIndexToAddress;\\n    mapping(uint256 => uint256) internal mapIndexToTokenId;\\n    mapping(address => uint256) public mapAddressToLatestTokenId;\\n    mapping(address => uint256[]) public mapAddressToTokenIds;\\n    mapping(address => bool) public processingMint;\\n    mapping(address => bool) public inWhitelist;\\n\\n    event requestedIndex(bytes32 indexed requestIndex, address requester);\\n\\n    constructor(\\n        uint256 _maxTokens, // max total token supply\\n        uint256 _maxTokensAllowedPerAddress, // max tokens mintable per address\\n        uint256 _feeWei, // must be in wei\\n        bool _hiddenURI, // URI show is \\\"hidden\\\"\\n        string memory _initBaseURI, // CID base\\n        string memory _temporaryURI, // CID hidden\\n        uint256 _percentageRoyalty, // between 0 to 100 | (converted to bps internally)\\n        address _vrfCoordinator, // chainlink's VRF\\n        address _linkToken, // chainlink's VRF\\n        bytes32 _keyHash, // chainlink's VRF\\n        uint256 _feeLink // chainlink's VRF\\n    ) ERC721(\\\"CuriousKid\\\", \\\"CK\\\") VRFConsumerBase(_vrfCoordinator, _linkToken) {\\n        totalTokensRemaining = _maxTokens;\\n        maxTokensAllowedPerAddress = _maxTokensAllowedPerAddress;\\n        feeWei = _feeWei;\\n        hiddenURI = _hiddenURI;\\n        baseURI = _initBaseURI;\\n        temporaryURI = _temporaryURI;\\n        keyHash = _keyHash;\\n        feeLink = _feeLink;\\n\\n        require(_percentageRoyalty <= 100, \\\"0 <= _percentageRoyalty <= 100\\\");\\n        _setRoyalties(owner(), _percentageRoyalty * 100);\\n        // TODO: cant seem to run setRoyalties(owner(), _percentageRoyalty); in constructor\\n    }\\n\\n    //// --- main functions --- ////\\n\\n    function requestRandomIndex() public payable nonReentrant whenNotPaused {\\n        require(\\n            !processingMint[msg.sender],\\n            \\\"Minting in progress. Please wait.\\\"\\n        );\\n\\n        require(totalTokensRemaining > 0, \\\"Token pool empty!\\\");\\n\\n        if (msg.sender != owner()) {\\n            require(\\n                balanceOf(msg.sender) < maxTokensAllowedPerAddress,\\n                \\\"Reached maximum amount of token allowed per address.\\\"\\n            );\\n            if (!inWhitelist[msg.sender]) {\\n                require(msg.value >= feeWei, \\\"Insufficient Funds\\\");\\n            }\\n        }\\n\\n        bytes32 requestIndex = _getRandomNumber();\\n        mapRequestIndexToAddress[requestIndex] = msg.sender;\\n        processingMint[msg.sender] = true;\\n        emit requestedIndex(requestIndex, msg.sender);\\n    }\\n\\n    function fulfillRandomness(bytes32 requestIndex, uint256 randomNumber)\\n        internal\\n        override\\n    {\\n        uint256 newRandomIndex = (randomNumber % totalTokensRemaining); // eg if totalTokensRemaining is 10, newRandomIndex will be 0-9\\n        assert(newRandomIndex < totalTokensRemaining);\\n        newTokenId = _getTokenIdAtIndex(newRandomIndex);\\n        assert(!_exists(newTokenId));\\n        address minter = mapRequestIndexToAddress[requestIndex];\\n        mapAddressToLatestTokenId[minter] = newTokenId;\\n        mapAddressToTokenIds[minter].push(newTokenId);\\n        _safeMint(minter, newTokenId);\\n\\n        _setTokenURI(\\n            newTokenId,\\n            string(\\n                abi.encodePacked(\\n                    _fillTokenName(newTokenId.toString()),\\n                    newTokenId.toString(),\\n                    \\\".json\\\"\\n                )\\n            )\\n        );\\n\\n        _adjMapIndexToTokenId(newRandomIndex);\\n        listMintedTokensIds.push(newTokenId);\\n\\n        assert(balanceOf(minter) == mapAddressToTokenIds[minter].length);\\n        processingMint[minter] = false;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721URIStorage: URI query for nonexistent token\\\"\\n        );\\n\\n        if (hiddenURI) {\\n            return temporaryURI;\\n        }\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        if (bytes(base).length == 0) {\\n            return _tokenURI; // If there is no base URI, return the token URI.\\n        }\\n\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI)); // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    //// --- utils functions --- ////\\n\\n    function _getRandomNumber() internal returns (bytes32 requestIndex) {\\n        require(\\n            LINK.balanceOf(address(this)) >= feeLink,\\n            \\\"Not enough LINK - fill contract with faucet\\\"\\n        );\\n        return requestRandomness(keyHash, feeLink);\\n    }\\n\\n    function _getTokenIdAtIndex(uint256 _index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (mapIndexToTokenId[_index] != 0) {\\n            return mapIndexToTokenId[_index]; // end position token id at vacant index position\\n        } else {\\n            return _index; // index == token id\\n        }\\n    }\\n\\n    function _adjMapIndexToTokenId(uint256 _index) internal {\\n        mapIndexToTokenId[_index] = _getTokenIdAtIndex(\\n            totalTokensRemaining - 1\\n        );\\n        mapIndexToTokenId[totalTokensRemaining - 1] = 0; // https://ethereum.stackexchange.com/questions/110848/get-random-number-without-replacement-in-solidity\\n        totalTokensRemaining -= 1;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function _fillTokenName(string memory _token)\\n        internal\\n        pure\\n        returns (string memory frontName)\\n    {\\n        // NFT Specific\\n        require(bytes(_token).length < 4, \\\"128 tokens max.\\\");\\n        if (bytes(_token).length == 1) {\\n            return \\\"00\\\";\\n        }\\n        if (bytes(_token).length == 2) {\\n            return \\\"0\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC2981Base)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    //// --- external functions --- ////\\n\\n    function getTokensOwned(address _address)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return mapAddressToTokenIds[_address];\\n    }\\n\\n    function mintedTokens() external view returns (uint256[] memory) {\\n        // sanity check\\n        return listMintedTokensIds;\\n    }\\n\\n    function mintedTokensSize() external view returns (uint256) {\\n        // sanity check\\n        return listMintedTokensIds.length;\\n    }\\n\\n    //// --- admin functions --- ////\\n\\n    function revealURI() external onlyOwner {\\n        require(hiddenURI, \\\"URI already revealed.\\\");\\n        hiddenURI = false;\\n    }\\n\\n    function hideURI() external onlyOwner {\\n        require(!hiddenURI, \\\"URI already hidden.\\\");\\n        hiddenURI = true;\\n    }\\n\\n    function setMaxTokensMintablePerAddress(uint256 _max) external onlyOwner {\\n        require(\\n            _max != maxTokensAllowedPerAddress,\\n            \\\"Trying to set same max value.\\\"\\n        );\\n        require(_max > 0, \\\"Minimum of 1.\\\");\\n        maxTokensAllowedPerAddress = _max;\\n    }\\n\\n    function setMintFee(uint256 _feeWei) external onlyOwner {\\n        // input must be in wei\\n        require(_feeWei != feeWei, \\\"Trying to set same fee value.\\\");\\n        feeWei = _feeWei;\\n    }\\n\\n    function setRoyalties(address _recipient, uint256 _percentageRoyalty)\\n        external\\n        onlyOwner\\n    {\\n        // currently only applies to one address at a time\\n        // _percentageRoyalty will be converted into a value between 0 to 10000 [basis points] | 100% == 10000 | 0% == 0\\n        require(_percentageRoyalty <= 100, \\\"0 <= _percentageRoyalty <= 100\\\");\\n        _setRoyalties(_recipient, _percentageRoyalty * 100);\\n    }\\n\\n    function enterWhitelist(address _address) external onlyOwner {\\n        require(_address != owner(), \\\"Owner is beyond whitelist.\\\");\\n        require(!inWhitelist[_address], \\\"Already in whitelist.\\\");\\n        inWhitelist[_address] = true;\\n    }\\n\\n    function exitWhitelist(address _address) external onlyOwner {\\n        require(inWhitelist[_address], \\\"Not in whitelist.\\\");\\n        inWhitelist[_address] = false;\\n    }\\n\\n    function contractBalance() external view onlyOwner returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(sent, \\\"Failed to send coins.\\\");\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\\n/** TODO:\\n0. gas test for all\\n0. make payable kolek monayyy - make auto set amount??\\n*/\\n\",\"keccak256\":\"0x6d89c55b689b35eb0df4c3ba65b635ee2c711a75ec72e0778243e34c3c8c06cf\",\"license\":\"MIT\"},\"contracts/EIP2981/ERC2981Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nimport './IERC2981Royalties.sol';\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\nabstract contract ERC2981Base is ERC165, IERC2981Royalties {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint24 amount;\\n    }\\n\\n    /// @inheritdoc\\tERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2981Royalties).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xa66657cf441afffa6f6530bce05d1ee3078405f44afb796f5791b37d02e87721\",\"license\":\"MIT\"},\"contracts/EIP2981/ERC2981ContractWideRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./ERC2981Base.sol\\\";\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\n/// @dev This implementation has the same royalties for each and every tokens\\nabstract contract ERC2981ContractWideRoyalties is ERC2981Base {\\n    RoyaltyInfo private _royalties;\\n\\n    /// @dev Sets token royalties\\n    /// @param recipient recipient of the royalties\\n    /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\\n    function _setRoyalties(address recipient, uint256 value) internal {\\n        require(value <= 10000, \\\"ERC2981Royalties: Too high\\\");\\n        _royalties = RoyaltyInfo(recipient, uint24(value));\\n    }\\n\\n    /// @inheritdoc\\tIERC2981Royalties\\n    // input value in WEI\\n    function royaltyInfo(uint256, uint256 value)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        RoyaltyInfo memory royalties = _royalties;\\n        receiver = royalties.recipient;\\n        royaltyAmount = (value * royalties.amount) / 10000;\\n    }\\n}\\n\",\"keccak256\":\"0x9836f1713e887f1cf953afa43f0a3599454354ff9a40576e7957ab4ef1625cdd\",\"license\":\"MIT\"},\"contracts/EIP2981/IERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title IERC2981Royalties\\n/// @dev Interface for the ERC2981 - Token Royalty standard\\ninterface IERC2981Royalties {\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\n    /// @return _receiver - address of who should be sent the royalty payment\\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\n        external\\n        view\\n        returns (address _receiver, uint256 _royaltyAmount);\\n}\\n\",\"keccak256\":\"0x7cbdfb8ed5e1c6925ff27ab652fef5150fc3ed1ed29641ecc6f7e37824fd0c27\",\"license\":\"MIT\"},\"contracts/ERC721URIStorageV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n// import \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageV2 is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) internal _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721URIStorage: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n        internal\\n        virtual\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721URIStorage: URI set of nonexistent token\\\"\\n        );\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1f4b8a90c8a725dc248b7d0bdd2a438c21c90928d66e52df7e0ebcce6833fb69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620068f9380380620068f98339818101604052810190620000379190620005e5565b83836040518060400160405280600a81526020017f437572696f75734b6964000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f434b0000000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bd92919062000467565b508060019080519060200190620000d692919062000467565b5050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050506000600860006101000a81548160ff02191690831515021790555062000184620001786200028260201b60201c565b6200028a60201b60201c565b60016009819055508a600b8190555089600c8190555088600d8190555087600f60006101000a81548160ff0219169083151502179055508660119080519060200190620001d392919062000467565b508560129080519060200190620001ec92919062000467565b508160138190555080601481905550606485111562000242576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200023990620007c4565b60405180910390fd5b62000271620002566200035060201b60201c565b6064876200026591906200085e565b6200037a60201b60201c565b505050505050505050505062000a74565b600033905090565b6000600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612710811115620003c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003b990620007a2565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff16815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548162ffffff021916908362ffffff1602179055509050505050565b828054620004759062000949565b90600052602060002090601f016020900481019282620004995760008555620004e5565b82601f10620004b457805160ff1916838001178555620004e5565b82800160010185558215620004e5579182015b82811115620004e4578251825591602001919060010190620004c7565b5b509050620004f49190620004f8565b5090565b5b8082111562000513576000816000905550600101620004f9565b5090565b60006200052e62000528846200081a565b620007e6565b9050828152602081018484840111156200054757600080fd5b6200055484828562000913565b509392505050565b6000815190506200056d8162000a0c565b92915050565b600081519050620005848162000a26565b92915050565b6000815190506200059b8162000a40565b92915050565b600082601f830112620005b357600080fd5b8151620005c584826020860162000517565b91505092915050565b600081519050620005df8162000a5a565b92915050565b60008060008060008060008060008060006101608c8e0312156200060857600080fd5b6000620006188e828f01620005ce565b9b505060206200062b8e828f01620005ce565b9a505060406200063e8e828f01620005ce565b9950506060620006518e828f0162000573565b98505060808c015167ffffffffffffffff8111156200066f57600080fd5b6200067d8e828f01620005a1565b97505060a08c015167ffffffffffffffff8111156200069b57600080fd5b620006a98e828f01620005a1565b96505060c0620006bc8e828f01620005ce565b95505060e0620006cf8e828f016200055c565b945050610100620006e38e828f016200055c565b935050610120620006f78e828f016200058a565b9250506101406200070b8e828f01620005ce565b9150509295989b509295989b9093969950565b60006200072d601a836200084d565b91507f45524332393831526f79616c746965733a20546f6f20686967680000000000006000830152602082019050919050565b60006200076f601e836200084d565b91507f30203c3d205f70657263656e74616765526f79616c7479203c3d2031303000006000830152602082019050919050565b60006020820190508181036000830152620007bd816200071e565b9050919050565b60006020820190508181036000830152620007df8162000760565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171562000810576200080f620009dd565b5b8060405250919050565b600067ffffffffffffffff821115620008385762000837620009dd565b5b601f19601f8301169050602081019050919050565b600082825260208201905092915050565b60006200086b8262000909565b9150620008788362000909565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620008b457620008b36200097f565b5b828202905092915050565b6000620008cc82620008e9565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200093357808201518184015260208101905062000916565b8381111562000943576000848401525b50505050565b600060028204905060018216806200096257607f821691505b60208210811415620009795762000978620009ae565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000a1781620008bf565b811462000a2357600080fd5b50565b62000a3181620008d3565b811462000a3d57600080fd5b50565b62000a4b81620008df565b811462000a5757600080fd5b50565b62000a658162000909565b811462000a7157600080fd5b50565b60805160601c60a05160601c615e4b62000aae60003960008181611af2015261350b015260008181612b7101526134cf0152615e4b6000f3fe60806040526004361061025c5760003560e01c80638b7afe2e11610144578063c2d79d90116100b6578063e02040871161007a578063e0204087146108b4578063e2aafa21146108dd578063e985e9c51461091a578063eddd0d9c14610957578063f2fde38b14610980578063f832eae5146109a95761025c565b8063c2d79d90146107a9578063c87b56dd146107e6578063cbe4cd6b14610823578063d004876414610860578063d4968fd01461089d5761025c565b806394985ddd1161010857806394985ddd1461068957806395d89b41146106b25780639a143a30146106dd578063a22cb4651461071a578063b88d4fde14610743578063bf2538521461076c5761025c565b80638b7afe2e146105b45780638c7ea24b146105df5780638cc54e7f146106085780638d75fe05146106335780638da5cb5b1461065e5761025c565b80632a55205a116101dd578063506f9e83116101a1578063506f9e83146104d75780635c975abb146104e15780636352211e1461050c57806370a0823114610549578063715018a6146105865780638456cb591461059d5761025c565b80632a55205a146104175780633ccfd60b146104555780633f4ba83a1461046c57806342842e0e14610483578063428c090b146104ac5761025c565b80632053054b116102245780632053054b1461034657806323b872dd1461036f57806323c347a41461039857806327bbfb0b146103c35780632a0d4a8f146103ec5761025c565b806301ffc9a71461026157806306fdde031461029e578063081812fc146102c9578063095ea7b314610306578063160fba561461032f575b600080fd5b34801561026d57600080fd5b506102886004803603810190610283919061431c565b6109d4565b60405161029591906153b2565b60405180910390f35b3480156102aa57600080fd5b506102b36109e6565b6040516102c0919061543b565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb919061436e565b610a78565b6040516102fd91906152c2565b60405180910390f35b34801561031257600080fd5b5061032d6004803603810190610328919061427b565b610afd565b005b34801561033b57600080fd5b50610344610c15565b005b34801561035257600080fd5b5061036d60048036038101906103689190614110565b610cfd565b005b34801561037b57600080fd5b5061039660048036038101906103919190614175565b610ed7565b005b3480156103a457600080fd5b506103ad610f37565b6040516103ba919061593d565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036038101906103e5919061436e565b610f3d565b005b3480156103f857600080fd5b5061040161104b565b60405161040e919061593d565b60405180910390f35b34801561042357600080fd5b5061043e600480360381019061043991906143c0565b611058565b60405161044c929190615329565b60405180910390f35b34801561046157600080fd5b5061046a611118565b005b34801561047857600080fd5b50610481611243565b005b34801561048f57600080fd5b506104aa60048036038101906104a59190614175565b6112c9565b005b3480156104b857600080fd5b506104c16112e9565b6040516104ce919061593d565b60405180910390f35b6104df6112ef565b005b3480156104ed57600080fd5b506104f661166e565b60405161050391906153b2565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e919061436e565b611685565b60405161054091906152c2565b60405180910390f35b34801561055557600080fd5b50610570600480360381019061056b9190614110565b611737565b60405161057d919061593d565b60405180910390f35b34801561059257600080fd5b5061059b6117ef565b005b3480156105a957600080fd5b506105b2611877565b005b3480156105c057600080fd5b506105c96118fd565b6040516105d6919061593d565b60405180910390f35b3480156105eb57600080fd5b506106066004803603810190610601919061427b565b611981565b005b34801561061457600080fd5b5061061d611a5b565b60405161062a91906153b2565b60405180910390f35b34801561063f57600080fd5b50610648611a6e565b6040516106559190615390565b60405180910390f35b34801561066a57600080fd5b50610673611ac6565b60405161068091906152c2565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab91906142e0565b611af0565b005b3480156106be57600080fd5b506106c7611b8c565b6040516106d4919061543b565b60405180910390f35b3480156106e957600080fd5b5061070460048036038101906106ff9190614110565b611c1e565b604051610711919061593d565b60405180910390f35b34801561072657600080fd5b50610741600480360381019061073c919061423f565b611c36565b005b34801561074f57600080fd5b5061076a600480360381019061076591906141c4565b611db7565b005b34801561077857600080fd5b50610793600480360381019061078e9190614110565b611e19565b6040516107a091906153b2565b60405180910390f35b3480156107b557600080fd5b506107d060048036038101906107cb919061427b565b611e39565b6040516107dd919061593d565b60405180910390f35b3480156107f257600080fd5b5061080d6004803603810190610808919061436e565b611e6a565b60405161081a919061543b565b60405180910390f35b34801561082f57600080fd5b5061084a6004803603810190610845919061436e565b612063565b604051610857919061593d565b60405180910390f35b34801561086c57600080fd5b5061088760048036038101906108829190614110565b612087565b6040516108949190615390565b60405180910390f35b3480156108a957600080fd5b506108b261211e565b005b3480156108c057600080fd5b506108db60048036038101906108d69190614110565b612207565b005b3480156108e957600080fd5b5061090460048036038101906108ff9190614110565b61236a565b60405161091191906153b2565b60405180910390f35b34801561092657600080fd5b50610941600480360381019061093c9190614139565b61238a565b60405161094e91906153b2565b60405180910390f35b34801561096357600080fd5b5061097e6004803603810190610979919061436e565b61241e565b005b34801561098c57600080fd5b506109a760048036038101906109a29190614110565b6124e9565b005b3480156109b557600080fd5b506109be6125e1565b6040516109cb919061593d565b60405180910390f35b60006109df826125e7565b9050919050565b6060600080546109f590615c15565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2190615c15565b8015610a6e5780601f10610a4357610100808354040283529160200191610a6e565b820191906000526020600020905b815481529060010190602001808311610a5157829003601f168201915b5050505050905090565b6000610a8382612661565b610ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab99061575d565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b0882611685565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b709061587d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b986126cd565b73ffffffffffffffffffffffffffffffffffffffff161480610bc75750610bc681610bc16126cd565b61238a565b5b610c06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfd9061569d565b60405180910390fd5b610c1083836126d5565b505050565b610c1d6126cd565b73ffffffffffffffffffffffffffffffffffffffff16610c3b611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614610c91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c889061577d565b60405180910390fd5b600f60009054906101000a900460ff16610ce0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd79061581d565b60405180910390fd5b6000600f60006101000a81548160ff021916908315150217905550565b610d056126cd565b73ffffffffffffffffffffffffffffffffffffffff16610d23611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614610d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d709061577d565b60405180910390fd5b610d81611ac6565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de69061591d565b60405180910390fd5b601a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e73906158dd565b60405180910390fd5b6001601a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610ee8610ee26126cd565b8261278e565b610f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1e9061589d565b60405180910390fd5b610f3283838361286c565b505050565b600c5481565b610f456126cd565b73ffffffffffffffffffffffffffffffffffffffff16610f63611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb09061577d565b60405180910390fd5b600c54811415610ffe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff5906155fd565b60405180910390fd5b60008111611041576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110389061555d565b60405180910390fd5b80600c8190555050565b6000600e80549050905090565b6000806000600a6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900462ffffff1662ffffff1662ffffff1681525050905080600001519250612710816020015162ffffff16856111049190615ac7565b61110e9190615a96565b9150509250929050565b6111206126cd565b73ffffffffffffffffffffffffffffffffffffffff1661113e611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614611194576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118b9061577d565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16476040516111ba906152ad565b60006040518083038185875af1925050503d80600081146111f7576040519150601f19603f3d011682016040523d82523d6000602084013e6111fc565b606091505b5050905080611240576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112379061551d565b60405180910390fd5b50565b61124b6126cd565b73ffffffffffffffffffffffffffffffffffffffff16611269611ac6565b73ffffffffffffffffffffffffffffffffffffffff16146112bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b69061577d565b60405180910390fd5b6112c7612ac8565b565b6112e483838360405180602001604052806000815250611db7565b505050565b600d5481565b60026009541415611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132c906158bd565b60405180910390fd5b600260098190555061134561166e565b15611385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137c9061565d565b60405180910390fd5b601960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611412576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611409906154fd565b60405180910390fd5b6000600b5411611457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144e9061585d565b60405180910390fd5b61145f611ac6565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461157557600c5461149d33611737565b106114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d4906158fd565b60405180910390fd5b601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661157457600d54341015611573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156a9061557d565b60405180910390fd5b5b5b600061157f612b6a565b9050336015600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550807f6e8621cd45677d3c4701319897875f8fe6612039fe5734179e62cad6fe90e0f23360405161165b91906152c2565b60405180910390a2506001600981905550565b6000600860009054906101000a900460ff16905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561172e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611725906156dd565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179f906156bd565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117f76126cd565b73ffffffffffffffffffffffffffffffffffffffff16611815611ac6565b73ffffffffffffffffffffffffffffffffffffffff161461186b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118629061577d565b60405180910390fd5b6118756000612c6c565b565b61187f6126cd565b73ffffffffffffffffffffffffffffffffffffffff1661189d611ac6565b73ffffffffffffffffffffffffffffffffffffffff16146118f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ea9061577d565b60405180910390fd5b6118fb612d32565b565b60006119076126cd565b73ffffffffffffffffffffffffffffffffffffffff16611925611ac6565b73ffffffffffffffffffffffffffffffffffffffff161461197b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119729061577d565b60405180910390fd5b47905090565b6119896126cd565b73ffffffffffffffffffffffffffffffffffffffff166119a7611ac6565b73ffffffffffffffffffffffffffffffffffffffff16146119fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f49061577d565b60405180910390fd5b6064811115611a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a389061583d565b60405180910390fd5b611a5782606483611a529190615ac7565b612dd5565b5050565b600f60009054906101000a900460ff1681565b6060600e805480602002602001604051908101604052809291908181526020018280548015611abc57602002820191906000526020600020905b815481526020019060010190808311611aa8575b5050505050905090565b6000600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b75906157fd565b60405180910390fd5b611b888282612ebf565b5050565b606060018054611b9b90615c15565b80601f0160208091040260200160405190810160405280929190818152602001828054611bc790615c15565b8015611c145780601f10611be957610100808354040283529160200191611c14565b820191906000526020600020905b815481529060010190602001808311611bf757829003601f168201915b5050505050905090565b60176020528060005260406000206000915090505481565b611c3e6126cd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca3906155bd565b60405180910390fd5b8060056000611cb96126cd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611d666126cd565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611dab91906153b2565b60405180910390a35050565b611dc8611dc26126cd565b8361278e565b611e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfe9061589d565b60405180910390fd5b611e13848484846131a4565b50505050565b60196020528060005260406000206000915054906101000a900460ff1681565b60186020528160005260406000208181548110611e5557600080fd5b90600052602060002001600091509150505481565b6060611e7582612661565b611eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eab9061573d565b60405180910390fd5b600f60009054906101000a900460ff1615611f5b5760128054611ed690615c15565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0290615c15565b8015611f4f5780601f10611f2457610100808354040283529160200191611f4f565b820191906000526020600020905b815481529060010190602001808311611f3257829003601f168201915b5050505050905061205e565b6000600660008481526020019081526020016000208054611f7b90615c15565b80601f0160208091040260200160405190810160405280929190818152602001828054611fa790615c15565b8015611ff45780601f10611fc957610100808354040283529160200191611ff4565b820191906000526020600020905b815481529060010190602001808311611fd757829003601f168201915b505050505090506000612005613200565b905060008151141561201b57819250505061205e565b60008251111561205057808260405160200161203892919061525a565b6040516020818303038152906040529250505061205e565b61205984613292565b925050505b919050565b600e818154811061207357600080fd5b906000526020600020016000915090505481565b6060601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561211257602002820191906000526020600020905b8154815260200190600101908083116120fe575b50505050509050919050565b6121266126cd565b73ffffffffffffffffffffffffffffffffffffffff16612144611ac6565b73ffffffffffffffffffffffffffffffffffffffff161461219a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121919061577d565b60405180910390fd5b600f60009054906101000a900460ff16156121ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e19061567d565b60405180910390fd5b6001600f60006101000a81548160ff021916908315150217905550565b61220f6126cd565b73ffffffffffffffffffffffffffffffffffffffff1661222d611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614612283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227a9061577d565b60405180910390fd5b601a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661230f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123069061579d565b60405180910390fd5b6000601a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b601a6020528060005260406000206000915054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6124266126cd565b73ffffffffffffffffffffffffffffffffffffffff16612444611ac6565b73ffffffffffffffffffffffffffffffffffffffff161461249a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124919061577d565b60405180910390fd5b600d548114156124df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d69061547d565b60405180910390fd5b80600d8190555050565b6124f16126cd565b73ffffffffffffffffffffffffffffffffffffffff1661250f611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614612565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255c9061577d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125cc906154dd565b60405180910390fd5b6125de81612c6c565b50565b600b5481565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061265a5750612659826133e4565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661274883611685565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061279982612661565b6127d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127cf9061561d565b60405180910390fd5b60006127e383611685565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061285257508373ffffffffffffffffffffffffffffffffffffffff1661283a84610a78565b73ffffffffffffffffffffffffffffffffffffffff16145b806128635750612862818561238a565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661288c82611685565b73ffffffffffffffffffffffffffffffffffffffff16146128e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d9906157bd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612952576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129499061559d565b60405180910390fd5b61295d8383836134c6565b6129686000826126d5565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129b89190615b21565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a0f9190615a40565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b612ad061166e565b612b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b069061545d565b60405180910390fd5b6000600860006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612b536126cd565b604051612b6091906152c2565b60405180910390a1565b60006014547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612bc891906152c2565b60206040518083038186803b158015612be057600080fd5b505afa158015612bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c189190614397565b1015612c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c50906155dd565b60405180910390fd5b612c676013546014546134cb565b905090565b6000600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612d3a61166e565b15612d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d719061565d565b60405180910390fd5b6001600860006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612dbe6126cd565b604051612dcb91906152c2565b60405180910390a1565b612710811115612e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e119061549d565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff16815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548162ffffff021916908362ffffff1602179055509050505050565b6000600b5482612ecf9190615ca4565b9050600b548110612f09577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b612f128161362d565b601081905550612f23601054612661565b15612f57577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006015600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050601054601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060105490806001815401808255809150506001900390600052602060002001600090919091909150556130498160105461366d565b61309260105461306261305d60105461368b565b613838565b61306d60105461368b565b60405160200161307e92919061527e565b604051602081830303815290604052613924565b61309b82613998565b600e6010549080600181540180825580915050600190039060005260206000200160009091909190915055601860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061311282611737565b14613146577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000601960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b6131af84848461286c565b6131bb84848484613a0a565b6131fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f1906154bd565b60405180910390fd5b50505050565b60606011805461320f90615c15565b80601f016020809104026020016040519081016040528092919081815260200182805461323b90615c15565b80156132885780601f1061325d57610100808354040283529160200191613288565b820191906000526020600020905b81548152906001019060200180831161326b57829003601f168201915b5050505050905090565b606061329d82612661565b6132dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132d39061573d565b60405180910390fd5b60006006600084815260200190815260200160002080546132fc90615c15565b80601f016020809104026020016040519081016040528092919081815260200182805461332890615c15565b80156133755780601f1061334a57610100808354040283529160200191613375565b820191906000526020600020905b81548152906001019060200180831161335857829003601f168201915b505050505090506000613386613200565b905060008151141561339c5781925050506133df565b6000825111156133d15780826040516020016133b992919061525a565b604051602081830303815290604052925050506133df565b6133da84613ba1565b925050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806134af57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806134bf57506134be82613c48565b5b9050919050565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200161353f9291906153cd565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161356c93929190615352565b602060405180830381600087803b15801561358657600080fd5b505af115801561359a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135be91906142b7565b5060006135e1846000306007600089815260200190815260200160002054613cb2565b9050600160076000868152602001908152602001600020546136039190615a40565b60076000868152602001908152602001600020819055506136248482613cee565b91505092915050565b6000806016600084815260200190815260200160002054146136645760166000838152602001908152602001600020549050613668565b8190505b919050565b613687828260405180602001604052806000815250613d21565b5050565b606060008214156136d3576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613833565b600082905060005b600082146137055780806136ee90615c47565b915050600a826136fe9190615a96565b91506136db565b60008167ffffffffffffffff811115613747577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156137795781602001600182028036833780820191505090505b5090505b6000851461382c576001826137929190615b21565b9150600a856137a19190615ca4565b60306137ad9190615a40565b60f81b8183815181106137e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856138259190615a96565b945061377d565b8093505050505b919050565b6060600482511061387e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138759061563d565b60405180910390fd5b6001825114156138c5576040518060400160405280600281526020017f3030000000000000000000000000000000000000000000000000000000000000815250905061391f565b60028251141561390c576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061391f565b6040518060200160405280600081525090505b919050565b61392d82612661565b61396c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613963906156fd565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190613993929190613f5d565b505050565b6139af6001600b546139aa9190615b21565b61362d565b60166000838152602001908152602001600020819055506000601660006001600b546139db9190615b21565b8152602001908152602001600020819055506001600b6000828254613a009190615b21565b9250508190555050565b6000613a2b8473ffffffffffffffffffffffffffffffffffffffff16613d7c565b15613b94578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613a546126cd565b8786866040518563ffffffff1660e01b8152600401613a7694939291906152dd565b602060405180830381600087803b158015613a9057600080fd5b505af1925050508015613ac157506040513d601f19601f82011682018060405250810190613abe9190614345565b60015b613b44573d8060008114613af1576040519150601f19603f3d011682016040523d82523d6000602084013e613af6565b606091505b50600081511415613b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b33906154bd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613b99565b600190505b949350505050565b6060613bac82612661565b613beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613be2906157dd565b60405180910390fd5b6000613bf5613200565b90506000815111613c155760405180602001604052806000815250613c40565b80613c1f8461368b565b604051602001613c3092919061525a565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600084848484604051602001613ccb94939291906153f6565b6040516020818303038152906040528051906020012060001c9050949350505050565b60008282604051602001613d0392919061522e565b60405160208183030381529060405280519060200120905092915050565b613d2b8383613d8f565b613d386000848484613a0a565b613d77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d6e906154bd565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613df69061571d565b60405180910390fd5b613e0881612661565b15613e48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e3f9061553d565b60405180910390fd5b613e54600083836134c6565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613ea49190615a40565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054613f6990615c15565b90600052602060002090601f016020900481019282613f8b5760008555613fd2565b82601f10613fa457805160ff1916838001178555613fd2565b82800160010185558215613fd2579182015b82811115613fd1578251825591602001919060010190613fb6565b5b509050613fdf9190613fe3565b5090565b5b80821115613ffc576000816000905550600101613fe4565b5090565b600061401361400e84615989565b615958565b90508281526020810184848401111561402b57600080fd5b614036848285615bd3565b509392505050565b60008135905061404d81615da2565b92915050565b60008135905061406281615db9565b92915050565b60008151905061407781615db9565b92915050565b60008135905061408c81615dd0565b92915050565b6000813590506140a181615de7565b92915050565b6000815190506140b681615de7565b92915050565b600082601f8301126140cd57600080fd5b81356140dd848260208601614000565b91505092915050565b6000813590506140f581615dfe565b92915050565b60008151905061410a81615dfe565b92915050565b60006020828403121561412257600080fd5b60006141308482850161403e565b91505092915050565b6000806040838503121561414c57600080fd5b600061415a8582860161403e565b925050602061416b8582860161403e565b9150509250929050565b60008060006060848603121561418a57600080fd5b60006141988682870161403e565b93505060206141a98682870161403e565b92505060406141ba868287016140e6565b9150509250925092565b600080600080608085870312156141da57600080fd5b60006141e88782880161403e565b94505060206141f98782880161403e565b935050604061420a878288016140e6565b925050606085013567ffffffffffffffff81111561422757600080fd5b614233878288016140bc565b91505092959194509250565b6000806040838503121561425257600080fd5b60006142608582860161403e565b925050602061427185828601614053565b9150509250929050565b6000806040838503121561428e57600080fd5b600061429c8582860161403e565b92505060206142ad858286016140e6565b9150509250929050565b6000602082840312156142c957600080fd5b60006142d784828501614068565b91505092915050565b600080604083850312156142f357600080fd5b60006143018582860161407d565b9250506020614312858286016140e6565b9150509250929050565b60006020828403121561432e57600080fd5b600061433c84828501614092565b91505092915050565b60006020828403121561435757600080fd5b6000614365848285016140a7565b91505092915050565b60006020828403121561438057600080fd5b600061438e848285016140e6565b91505092915050565b6000602082840312156143a957600080fd5b60006143b7848285016140fb565b91505092915050565b600080604083850312156143d357600080fd5b60006143e1858286016140e6565b92505060206143f2858286016140e6565b9150509250929050565b600061440883836151f9565b60208301905092915050565b61441d81615b55565b82525050565b600061442e826159c9565b61443881856159f7565b9350614443836159b9565b8060005b8381101561447457815161445b88826143fc565b9750614466836159ea565b925050600181019050614447565b5085935050505092915050565b61448a81615b67565b82525050565b61449981615b73565b82525050565b6144b06144ab82615b73565b615c90565b82525050565b60006144c1826159d4565b6144cb8185615a08565b93506144db818560208601615be2565b6144e481615d91565b840191505092915050565b60006144fa826159df565b6145048185615a24565b9350614514818560208601615be2565b61451d81615d91565b840191505092915050565b6000614533826159df565b61453d8185615a35565b935061454d818560208601615be2565b80840191505092915050565b6000614566601483615a24565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b60006145a6601d83615a24565b91507f547279696e6720746f207365742073616d65206665652076616c75652e0000006000830152602082019050919050565b60006145e6601a83615a24565b91507f45524332393831526f79616c746965733a20546f6f20686967680000000000006000830152602082019050919050565b6000614626603283615a24565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b600061468c602683615a24565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006146f2602183615a24565b91507f4d696e74696e6720696e2070726f67726573732e20506c65617365207761697460008301527f2e000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614758601583615a24565b91507f4661696c656420746f2073656e6420636f696e732e00000000000000000000006000830152602082019050919050565b6000614798601c83615a24565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b60006147d8600d83615a24565b91507f4d696e696d756d206f6620312e000000000000000000000000000000000000006000830152602082019050919050565b6000614818601283615a24565b91507f496e73756666696369656e742046756e647300000000000000000000000000006000830152602082019050919050565b6000614858602483615a24565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006148be601983615a24565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b60006148fe602b83615a24565b91507f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060008301527f77697468206661756365740000000000000000000000000000000000000000006020830152604082019050919050565b6000614964601d83615a24565b91507f547279696e6720746f207365742073616d65206d61782076616c75652e0000006000830152602082019050919050565b60006149a4602c83615a24565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000614a0a600f83615a24565b91507f31323820746f6b656e73206d61782e00000000000000000000000000000000006000830152602082019050919050565b6000614a4a601083615a24565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000614a8a601383615a24565b91507f55524920616c72656164792068696464656e2e000000000000000000000000006000830152602082019050919050565b6000614aca603883615a24565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b6000614b30602a83615a24565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b6000614b96602983615a24565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000614bfc602e83615a24565b91507f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008301527f6578697374656e7420746f6b656e0000000000000000000000000000000000006020830152604082019050919050565b6000614c62602083615a24565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000614ca2603183615a24565b91507f45524337323155524953746f726167653a2055524920717565727920666f722060008301527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006020830152604082019050919050565b6000614d08602c83615a24565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000614d6e600583615a35565b91507f2e6a736f6e0000000000000000000000000000000000000000000000000000006000830152600582019050919050565b6000614dae602083615a24565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614dee601183615a24565b91507f4e6f7420696e2077686974656c6973742e0000000000000000000000000000006000830152602082019050919050565b6000614e2e602983615a24565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000614e94602f83615a24565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000614efa601f83615a24565b91507f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006000830152602082019050919050565b6000614f3a601583615a24565b91507f55524920616c72656164792072657665616c65642e00000000000000000000006000830152602082019050919050565b6000614f7a601e83615a24565b91507f30203c3d205f70657263656e74616765526f79616c7479203c3d2031303000006000830152602082019050919050565b6000614fba601183615a24565b91507f546f6b656e20706f6f6c20656d707479210000000000000000000000000000006000830152602082019050919050565b6000614ffa602183615a24565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000615060600083615a19565b9150600082019050919050565b600061507a603183615a24565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b60006150e0601f83615a24565b91507f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006000830152602082019050919050565b6000615120601583615a24565b91507f416c726561647920696e2077686974656c6973742e00000000000000000000006000830152602082019050919050565b6000615160603483615a24565b91507f52656163686564206d6178696d756d20616d6f756e74206f6620746f6b656e2060008301527f616c6c6f7765642070657220616464726573732e0000000000000000000000006020830152604082019050919050565b60006151c6601a83615a24565b91507f4f776e6572206973206265796f6e642077686974656c6973742e0000000000006000830152602082019050919050565b61520281615bc9565b82525050565b61521181615bc9565b82525050565b61522861522382615bc9565b615c9a565b82525050565b600061523a828561449f565b60208201915061524a8284615217565b6020820191508190509392505050565b60006152668285614528565b91506152728284614528565b91508190509392505050565b600061528a8285614528565b91506152968284614528565b91506152a182614d61565b91508190509392505050565b60006152b882615053565b9150819050919050565b60006020820190506152d76000830184614414565b92915050565b60006080820190506152f26000830187614414565b6152ff6020830186614414565b61530c6040830185615208565b818103606083015261531e81846144b6565b905095945050505050565b600060408201905061533e6000830185614414565b61534b6020830184615208565b9392505050565b60006060820190506153676000830186614414565b6153746020830185615208565b818103604083015261538681846144b6565b9050949350505050565b600060208201905081810360008301526153aa8184614423565b905092915050565b60006020820190506153c76000830184614481565b92915050565b60006040820190506153e26000830185614490565b6153ef6020830184615208565b9392505050565b600060808201905061540b6000830187614490565b6154186020830186615208565b6154256040830185614414565b6154326060830184615208565b95945050505050565b6000602082019050818103600083015261545581846144ef565b905092915050565b6000602082019050818103600083015261547681614559565b9050919050565b6000602082019050818103600083015261549681614599565b9050919050565b600060208201905081810360008301526154b6816145d9565b9050919050565b600060208201905081810360008301526154d681614619565b9050919050565b600060208201905081810360008301526154f68161467f565b9050919050565b60006020820190508181036000830152615516816146e5565b9050919050565b600060208201905081810360008301526155368161474b565b9050919050565b600060208201905081810360008301526155568161478b565b9050919050565b60006020820190508181036000830152615576816147cb565b9050919050565b600060208201905081810360008301526155968161480b565b9050919050565b600060208201905081810360008301526155b68161484b565b9050919050565b600060208201905081810360008301526155d6816148b1565b9050919050565b600060208201905081810360008301526155f6816148f1565b9050919050565b6000602082019050818103600083015261561681614957565b9050919050565b6000602082019050818103600083015261563681614997565b9050919050565b60006020820190508181036000830152615656816149fd565b9050919050565b6000602082019050818103600083015261567681614a3d565b9050919050565b6000602082019050818103600083015261569681614a7d565b9050919050565b600060208201905081810360008301526156b681614abd565b9050919050565b600060208201905081810360008301526156d681614b23565b9050919050565b600060208201905081810360008301526156f681614b89565b9050919050565b6000602082019050818103600083015261571681614bef565b9050919050565b6000602082019050818103600083015261573681614c55565b9050919050565b6000602082019050818103600083015261575681614c95565b9050919050565b6000602082019050818103600083015261577681614cfb565b9050919050565b6000602082019050818103600083015261579681614da1565b9050919050565b600060208201905081810360008301526157b681614de1565b9050919050565b600060208201905081810360008301526157d681614e21565b9050919050565b600060208201905081810360008301526157f681614e87565b9050919050565b6000602082019050818103600083015261581681614eed565b9050919050565b6000602082019050818103600083015261583681614f2d565b9050919050565b6000602082019050818103600083015261585681614f6d565b9050919050565b6000602082019050818103600083015261587681614fad565b9050919050565b6000602082019050818103600083015261589681614fed565b9050919050565b600060208201905081810360008301526158b68161506d565b9050919050565b600060208201905081810360008301526158d6816150d3565b9050919050565b600060208201905081810360008301526158f681615113565b9050919050565b6000602082019050818103600083015261591681615153565b9050919050565b60006020820190508181036000830152615936816151b9565b9050919050565b60006020820190506159526000830184615208565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561597f5761597e615d62565b5b8060405250919050565b600067ffffffffffffffff8211156159a4576159a3615d62565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000615a4b82615bc9565b9150615a5683615bc9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615a8b57615a8a615cd5565b5b828201905092915050565b6000615aa182615bc9565b9150615aac83615bc9565b925082615abc57615abb615d04565b5b828204905092915050565b6000615ad282615bc9565b9150615add83615bc9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615b1657615b15615cd5565b5b828202905092915050565b6000615b2c82615bc9565b9150615b3783615bc9565b925082821015615b4a57615b49615cd5565b5b828203905092915050565b6000615b6082615ba9565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015615c00578082015181840152602081019050615be5565b83811115615c0f576000848401525b50505050565b60006002820490506001821680615c2d57607f821691505b60208210811415615c4157615c40615d33565b5b50919050565b6000615c5282615bc9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615c8557615c84615cd5565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000615caf82615bc9565b9150615cba83615bc9565b925082615cca57615cc9615d04565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b615dab81615b55565b8114615db657600080fd5b50565b615dc281615b67565b8114615dcd57600080fd5b50565b615dd981615b73565b8114615de457600080fd5b50565b615df081615b7d565b8114615dfb57600080fd5b50565b615e0781615bc9565b8114615e1257600080fd5b5056fea26469706673582212203a4cc929ee8c3d400524c7ecb6b7ea38ea15c454ee00cea9b5d553efdbc9446964736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061025c5760003560e01c80638b7afe2e11610144578063c2d79d90116100b6578063e02040871161007a578063e0204087146108b4578063e2aafa21146108dd578063e985e9c51461091a578063eddd0d9c14610957578063f2fde38b14610980578063f832eae5146109a95761025c565b8063c2d79d90146107a9578063c87b56dd146107e6578063cbe4cd6b14610823578063d004876414610860578063d4968fd01461089d5761025c565b806394985ddd1161010857806394985ddd1461068957806395d89b41146106b25780639a143a30146106dd578063a22cb4651461071a578063b88d4fde14610743578063bf2538521461076c5761025c565b80638b7afe2e146105b45780638c7ea24b146105df5780638cc54e7f146106085780638d75fe05146106335780638da5cb5b1461065e5761025c565b80632a55205a116101dd578063506f9e83116101a1578063506f9e83146104d75780635c975abb146104e15780636352211e1461050c57806370a0823114610549578063715018a6146105865780638456cb591461059d5761025c565b80632a55205a146104175780633ccfd60b146104555780633f4ba83a1461046c57806342842e0e14610483578063428c090b146104ac5761025c565b80632053054b116102245780632053054b1461034657806323b872dd1461036f57806323c347a41461039857806327bbfb0b146103c35780632a0d4a8f146103ec5761025c565b806301ffc9a71461026157806306fdde031461029e578063081812fc146102c9578063095ea7b314610306578063160fba561461032f575b600080fd5b34801561026d57600080fd5b506102886004803603810190610283919061431c565b6109d4565b60405161029591906153b2565b60405180910390f35b3480156102aa57600080fd5b506102b36109e6565b6040516102c0919061543b565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb919061436e565b610a78565b6040516102fd91906152c2565b60405180910390f35b34801561031257600080fd5b5061032d6004803603810190610328919061427b565b610afd565b005b34801561033b57600080fd5b50610344610c15565b005b34801561035257600080fd5b5061036d60048036038101906103689190614110565b610cfd565b005b34801561037b57600080fd5b5061039660048036038101906103919190614175565b610ed7565b005b3480156103a457600080fd5b506103ad610f37565b6040516103ba919061593d565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036038101906103e5919061436e565b610f3d565b005b3480156103f857600080fd5b5061040161104b565b60405161040e919061593d565b60405180910390f35b34801561042357600080fd5b5061043e600480360381019061043991906143c0565b611058565b60405161044c929190615329565b60405180910390f35b34801561046157600080fd5b5061046a611118565b005b34801561047857600080fd5b50610481611243565b005b34801561048f57600080fd5b506104aa60048036038101906104a59190614175565b6112c9565b005b3480156104b857600080fd5b506104c16112e9565b6040516104ce919061593d565b60405180910390f35b6104df6112ef565b005b3480156104ed57600080fd5b506104f661166e565b60405161050391906153b2565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e919061436e565b611685565b60405161054091906152c2565b60405180910390f35b34801561055557600080fd5b50610570600480360381019061056b9190614110565b611737565b60405161057d919061593d565b60405180910390f35b34801561059257600080fd5b5061059b6117ef565b005b3480156105a957600080fd5b506105b2611877565b005b3480156105c057600080fd5b506105c96118fd565b6040516105d6919061593d565b60405180910390f35b3480156105eb57600080fd5b506106066004803603810190610601919061427b565b611981565b005b34801561061457600080fd5b5061061d611a5b565b60405161062a91906153b2565b60405180910390f35b34801561063f57600080fd5b50610648611a6e565b6040516106559190615390565b60405180910390f35b34801561066a57600080fd5b50610673611ac6565b60405161068091906152c2565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab91906142e0565b611af0565b005b3480156106be57600080fd5b506106c7611b8c565b6040516106d4919061543b565b60405180910390f35b3480156106e957600080fd5b5061070460048036038101906106ff9190614110565b611c1e565b604051610711919061593d565b60405180910390f35b34801561072657600080fd5b50610741600480360381019061073c919061423f565b611c36565b005b34801561074f57600080fd5b5061076a600480360381019061076591906141c4565b611db7565b005b34801561077857600080fd5b50610793600480360381019061078e9190614110565b611e19565b6040516107a091906153b2565b60405180910390f35b3480156107b557600080fd5b506107d060048036038101906107cb919061427b565b611e39565b6040516107dd919061593d565b60405180910390f35b3480156107f257600080fd5b5061080d6004803603810190610808919061436e565b611e6a565b60405161081a919061543b565b60405180910390f35b34801561082f57600080fd5b5061084a6004803603810190610845919061436e565b612063565b604051610857919061593d565b60405180910390f35b34801561086c57600080fd5b5061088760048036038101906108829190614110565b612087565b6040516108949190615390565b60405180910390f35b3480156108a957600080fd5b506108b261211e565b005b3480156108c057600080fd5b506108db60048036038101906108d69190614110565b612207565b005b3480156108e957600080fd5b5061090460048036038101906108ff9190614110565b61236a565b60405161091191906153b2565b60405180910390f35b34801561092657600080fd5b50610941600480360381019061093c9190614139565b61238a565b60405161094e91906153b2565b60405180910390f35b34801561096357600080fd5b5061097e6004803603810190610979919061436e565b61241e565b005b34801561098c57600080fd5b506109a760048036038101906109a29190614110565b6124e9565b005b3480156109b557600080fd5b506109be6125e1565b6040516109cb919061593d565b60405180910390f35b60006109df826125e7565b9050919050565b6060600080546109f590615c15565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2190615c15565b8015610a6e5780601f10610a4357610100808354040283529160200191610a6e565b820191906000526020600020905b815481529060010190602001808311610a5157829003601f168201915b5050505050905090565b6000610a8382612661565b610ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab99061575d565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b0882611685565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b709061587d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b986126cd565b73ffffffffffffffffffffffffffffffffffffffff161480610bc75750610bc681610bc16126cd565b61238a565b5b610c06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfd9061569d565b60405180910390fd5b610c1083836126d5565b505050565b610c1d6126cd565b73ffffffffffffffffffffffffffffffffffffffff16610c3b611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614610c91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c889061577d565b60405180910390fd5b600f60009054906101000a900460ff16610ce0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd79061581d565b60405180910390fd5b6000600f60006101000a81548160ff021916908315150217905550565b610d056126cd565b73ffffffffffffffffffffffffffffffffffffffff16610d23611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614610d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d709061577d565b60405180910390fd5b610d81611ac6565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de69061591d565b60405180910390fd5b601a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e73906158dd565b60405180910390fd5b6001601a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610ee8610ee26126cd565b8261278e565b610f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1e9061589d565b60405180910390fd5b610f3283838361286c565b505050565b600c5481565b610f456126cd565b73ffffffffffffffffffffffffffffffffffffffff16610f63611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb09061577d565b60405180910390fd5b600c54811415610ffe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff5906155fd565b60405180910390fd5b60008111611041576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110389061555d565b60405180910390fd5b80600c8190555050565b6000600e80549050905090565b6000806000600a6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900462ffffff1662ffffff1662ffffff1681525050905080600001519250612710816020015162ffffff16856111049190615ac7565b61110e9190615a96565b9150509250929050565b6111206126cd565b73ffffffffffffffffffffffffffffffffffffffff1661113e611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614611194576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118b9061577d565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16476040516111ba906152ad565b60006040518083038185875af1925050503d80600081146111f7576040519150601f19603f3d011682016040523d82523d6000602084013e6111fc565b606091505b5050905080611240576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112379061551d565b60405180910390fd5b50565b61124b6126cd565b73ffffffffffffffffffffffffffffffffffffffff16611269611ac6565b73ffffffffffffffffffffffffffffffffffffffff16146112bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b69061577d565b60405180910390fd5b6112c7612ac8565b565b6112e483838360405180602001604052806000815250611db7565b505050565b600d5481565b60026009541415611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132c906158bd565b60405180910390fd5b600260098190555061134561166e565b15611385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137c9061565d565b60405180910390fd5b601960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611412576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611409906154fd565b60405180910390fd5b6000600b5411611457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144e9061585d565b60405180910390fd5b61145f611ac6565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461157557600c5461149d33611737565b106114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d4906158fd565b60405180910390fd5b601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661157457600d54341015611573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156a9061557d565b60405180910390fd5b5b5b600061157f612b6a565b9050336015600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550807f6e8621cd45677d3c4701319897875f8fe6612039fe5734179e62cad6fe90e0f23360405161165b91906152c2565b60405180910390a2506001600981905550565b6000600860009054906101000a900460ff16905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561172e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611725906156dd565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179f906156bd565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117f76126cd565b73ffffffffffffffffffffffffffffffffffffffff16611815611ac6565b73ffffffffffffffffffffffffffffffffffffffff161461186b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118629061577d565b60405180910390fd5b6118756000612c6c565b565b61187f6126cd565b73ffffffffffffffffffffffffffffffffffffffff1661189d611ac6565b73ffffffffffffffffffffffffffffffffffffffff16146118f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ea9061577d565b60405180910390fd5b6118fb612d32565b565b60006119076126cd565b73ffffffffffffffffffffffffffffffffffffffff16611925611ac6565b73ffffffffffffffffffffffffffffffffffffffff161461197b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119729061577d565b60405180910390fd5b47905090565b6119896126cd565b73ffffffffffffffffffffffffffffffffffffffff166119a7611ac6565b73ffffffffffffffffffffffffffffffffffffffff16146119fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f49061577d565b60405180910390fd5b6064811115611a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a389061583d565b60405180910390fd5b611a5782606483611a529190615ac7565b612dd5565b5050565b600f60009054906101000a900460ff1681565b6060600e805480602002602001604051908101604052809291908181526020018280548015611abc57602002820191906000526020600020905b815481526020019060010190808311611aa8575b5050505050905090565b6000600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b75906157fd565b60405180910390fd5b611b888282612ebf565b5050565b606060018054611b9b90615c15565b80601f0160208091040260200160405190810160405280929190818152602001828054611bc790615c15565b8015611c145780601f10611be957610100808354040283529160200191611c14565b820191906000526020600020905b815481529060010190602001808311611bf757829003601f168201915b5050505050905090565b60176020528060005260406000206000915090505481565b611c3e6126cd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca3906155bd565b60405180910390fd5b8060056000611cb96126cd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611d666126cd565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611dab91906153b2565b60405180910390a35050565b611dc8611dc26126cd565b8361278e565b611e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfe9061589d565b60405180910390fd5b611e13848484846131a4565b50505050565b60196020528060005260406000206000915054906101000a900460ff1681565b60186020528160005260406000208181548110611e5557600080fd5b90600052602060002001600091509150505481565b6060611e7582612661565b611eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eab9061573d565b60405180910390fd5b600f60009054906101000a900460ff1615611f5b5760128054611ed690615c15565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0290615c15565b8015611f4f5780601f10611f2457610100808354040283529160200191611f4f565b820191906000526020600020905b815481529060010190602001808311611f3257829003601f168201915b5050505050905061205e565b6000600660008481526020019081526020016000208054611f7b90615c15565b80601f0160208091040260200160405190810160405280929190818152602001828054611fa790615c15565b8015611ff45780601f10611fc957610100808354040283529160200191611ff4565b820191906000526020600020905b815481529060010190602001808311611fd757829003601f168201915b505050505090506000612005613200565b905060008151141561201b57819250505061205e565b60008251111561205057808260405160200161203892919061525a565b6040516020818303038152906040529250505061205e565b61205984613292565b925050505b919050565b600e818154811061207357600080fd5b906000526020600020016000915090505481565b6060601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561211257602002820191906000526020600020905b8154815260200190600101908083116120fe575b50505050509050919050565b6121266126cd565b73ffffffffffffffffffffffffffffffffffffffff16612144611ac6565b73ffffffffffffffffffffffffffffffffffffffff161461219a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121919061577d565b60405180910390fd5b600f60009054906101000a900460ff16156121ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e19061567d565b60405180910390fd5b6001600f60006101000a81548160ff021916908315150217905550565b61220f6126cd565b73ffffffffffffffffffffffffffffffffffffffff1661222d611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614612283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227a9061577d565b60405180910390fd5b601a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661230f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123069061579d565b60405180910390fd5b6000601a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b601a6020528060005260406000206000915054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6124266126cd565b73ffffffffffffffffffffffffffffffffffffffff16612444611ac6565b73ffffffffffffffffffffffffffffffffffffffff161461249a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124919061577d565b60405180910390fd5b600d548114156124df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d69061547d565b60405180910390fd5b80600d8190555050565b6124f16126cd565b73ffffffffffffffffffffffffffffffffffffffff1661250f611ac6565b73ffffffffffffffffffffffffffffffffffffffff1614612565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255c9061577d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125cc906154dd565b60405180910390fd5b6125de81612c6c565b50565b600b5481565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061265a5750612659826133e4565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661274883611685565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061279982612661565b6127d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127cf9061561d565b60405180910390fd5b60006127e383611685565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061285257508373ffffffffffffffffffffffffffffffffffffffff1661283a84610a78565b73ffffffffffffffffffffffffffffffffffffffff16145b806128635750612862818561238a565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661288c82611685565b73ffffffffffffffffffffffffffffffffffffffff16146128e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d9906157bd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612952576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129499061559d565b60405180910390fd5b61295d8383836134c6565b6129686000826126d5565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129b89190615b21565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a0f9190615a40565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b612ad061166e565b612b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b069061545d565b60405180910390fd5b6000600860006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612b536126cd565b604051612b6091906152c2565b60405180910390a1565b60006014547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612bc891906152c2565b60206040518083038186803b158015612be057600080fd5b505afa158015612bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c189190614397565b1015612c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c50906155dd565b60405180910390fd5b612c676013546014546134cb565b905090565b6000600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612d3a61166e565b15612d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d719061565d565b60405180910390fd5b6001600860006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612dbe6126cd565b604051612dcb91906152c2565b60405180910390a1565b612710811115612e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e119061549d565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff16815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548162ffffff021916908362ffffff1602179055509050505050565b6000600b5482612ecf9190615ca4565b9050600b548110612f09577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b612f128161362d565b601081905550612f23601054612661565b15612f57577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006015600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050601054601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060105490806001815401808255809150506001900390600052602060002001600090919091909150556130498160105461366d565b61309260105461306261305d60105461368b565b613838565b61306d60105461368b565b60405160200161307e92919061527e565b604051602081830303815290604052613924565b61309b82613998565b600e6010549080600181540180825580915050600190039060005260206000200160009091909190915055601860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061311282611737565b14613146577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000601960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b6131af84848461286c565b6131bb84848484613a0a565b6131fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f1906154bd565b60405180910390fd5b50505050565b60606011805461320f90615c15565b80601f016020809104026020016040519081016040528092919081815260200182805461323b90615c15565b80156132885780601f1061325d57610100808354040283529160200191613288565b820191906000526020600020905b81548152906001019060200180831161326b57829003601f168201915b5050505050905090565b606061329d82612661565b6132dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132d39061573d565b60405180910390fd5b60006006600084815260200190815260200160002080546132fc90615c15565b80601f016020809104026020016040519081016040528092919081815260200182805461332890615c15565b80156133755780601f1061334a57610100808354040283529160200191613375565b820191906000526020600020905b81548152906001019060200180831161335857829003601f168201915b505050505090506000613386613200565b905060008151141561339c5781925050506133df565b6000825111156133d15780826040516020016133b992919061525a565b604051602081830303815290604052925050506133df565b6133da84613ba1565b925050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806134af57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806134bf57506134be82613c48565b5b9050919050565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200161353f9291906153cd565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161356c93929190615352565b602060405180830381600087803b15801561358657600080fd5b505af115801561359a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135be91906142b7565b5060006135e1846000306007600089815260200190815260200160002054613cb2565b9050600160076000868152602001908152602001600020546136039190615a40565b60076000868152602001908152602001600020819055506136248482613cee565b91505092915050565b6000806016600084815260200190815260200160002054146136645760166000838152602001908152602001600020549050613668565b8190505b919050565b613687828260405180602001604052806000815250613d21565b5050565b606060008214156136d3576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613833565b600082905060005b600082146137055780806136ee90615c47565b915050600a826136fe9190615a96565b91506136db565b60008167ffffffffffffffff811115613747577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156137795781602001600182028036833780820191505090505b5090505b6000851461382c576001826137929190615b21565b9150600a856137a19190615ca4565b60306137ad9190615a40565b60f81b8183815181106137e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856138259190615a96565b945061377d565b8093505050505b919050565b6060600482511061387e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138759061563d565b60405180910390fd5b6001825114156138c5576040518060400160405280600281526020017f3030000000000000000000000000000000000000000000000000000000000000815250905061391f565b60028251141561390c576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061391f565b6040518060200160405280600081525090505b919050565b61392d82612661565b61396c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613963906156fd565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190613993929190613f5d565b505050565b6139af6001600b546139aa9190615b21565b61362d565b60166000838152602001908152602001600020819055506000601660006001600b546139db9190615b21565b8152602001908152602001600020819055506001600b6000828254613a009190615b21565b9250508190555050565b6000613a2b8473ffffffffffffffffffffffffffffffffffffffff16613d7c565b15613b94578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613a546126cd565b8786866040518563ffffffff1660e01b8152600401613a7694939291906152dd565b602060405180830381600087803b158015613a9057600080fd5b505af1925050508015613ac157506040513d601f19601f82011682018060405250810190613abe9190614345565b60015b613b44573d8060008114613af1576040519150601f19603f3d011682016040523d82523d6000602084013e613af6565b606091505b50600081511415613b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b33906154bd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613b99565b600190505b949350505050565b6060613bac82612661565b613beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613be2906157dd565b60405180910390fd5b6000613bf5613200565b90506000815111613c155760405180602001604052806000815250613c40565b80613c1f8461368b565b604051602001613c3092919061525a565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600084848484604051602001613ccb94939291906153f6565b6040516020818303038152906040528051906020012060001c9050949350505050565b60008282604051602001613d0392919061522e565b60405160208183030381529060405280519060200120905092915050565b613d2b8383613d8f565b613d386000848484613a0a565b613d77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d6e906154bd565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613df69061571d565b60405180910390fd5b613e0881612661565b15613e48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e3f9061553d565b60405180910390fd5b613e54600083836134c6565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613ea49190615a40565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054613f6990615c15565b90600052602060002090601f016020900481019282613f8b5760008555613fd2565b82601f10613fa457805160ff1916838001178555613fd2565b82800160010185558215613fd2579182015b82811115613fd1578251825591602001919060010190613fb6565b5b509050613fdf9190613fe3565b5090565b5b80821115613ffc576000816000905550600101613fe4565b5090565b600061401361400e84615989565b615958565b90508281526020810184848401111561402b57600080fd5b614036848285615bd3565b509392505050565b60008135905061404d81615da2565b92915050565b60008135905061406281615db9565b92915050565b60008151905061407781615db9565b92915050565b60008135905061408c81615dd0565b92915050565b6000813590506140a181615de7565b92915050565b6000815190506140b681615de7565b92915050565b600082601f8301126140cd57600080fd5b81356140dd848260208601614000565b91505092915050565b6000813590506140f581615dfe565b92915050565b60008151905061410a81615dfe565b92915050565b60006020828403121561412257600080fd5b60006141308482850161403e565b91505092915050565b6000806040838503121561414c57600080fd5b600061415a8582860161403e565b925050602061416b8582860161403e565b9150509250929050565b60008060006060848603121561418a57600080fd5b60006141988682870161403e565b93505060206141a98682870161403e565b92505060406141ba868287016140e6565b9150509250925092565b600080600080608085870312156141da57600080fd5b60006141e88782880161403e565b94505060206141f98782880161403e565b935050604061420a878288016140e6565b925050606085013567ffffffffffffffff81111561422757600080fd5b614233878288016140bc565b91505092959194509250565b6000806040838503121561425257600080fd5b60006142608582860161403e565b925050602061427185828601614053565b9150509250929050565b6000806040838503121561428e57600080fd5b600061429c8582860161403e565b92505060206142ad858286016140e6565b9150509250929050565b6000602082840312156142c957600080fd5b60006142d784828501614068565b91505092915050565b600080604083850312156142f357600080fd5b60006143018582860161407d565b9250506020614312858286016140e6565b9150509250929050565b60006020828403121561432e57600080fd5b600061433c84828501614092565b91505092915050565b60006020828403121561435757600080fd5b6000614365848285016140a7565b91505092915050565b60006020828403121561438057600080fd5b600061438e848285016140e6565b91505092915050565b6000602082840312156143a957600080fd5b60006143b7848285016140fb565b91505092915050565b600080604083850312156143d357600080fd5b60006143e1858286016140e6565b92505060206143f2858286016140e6565b9150509250929050565b600061440883836151f9565b60208301905092915050565b61441d81615b55565b82525050565b600061442e826159c9565b61443881856159f7565b9350614443836159b9565b8060005b8381101561447457815161445b88826143fc565b9750614466836159ea565b925050600181019050614447565b5085935050505092915050565b61448a81615b67565b82525050565b61449981615b73565b82525050565b6144b06144ab82615b73565b615c90565b82525050565b60006144c1826159d4565b6144cb8185615a08565b93506144db818560208601615be2565b6144e481615d91565b840191505092915050565b60006144fa826159df565b6145048185615a24565b9350614514818560208601615be2565b61451d81615d91565b840191505092915050565b6000614533826159df565b61453d8185615a35565b935061454d818560208601615be2565b80840191505092915050565b6000614566601483615a24565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b60006145a6601d83615a24565b91507f547279696e6720746f207365742073616d65206665652076616c75652e0000006000830152602082019050919050565b60006145e6601a83615a24565b91507f45524332393831526f79616c746965733a20546f6f20686967680000000000006000830152602082019050919050565b6000614626603283615a24565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b600061468c602683615a24565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006146f2602183615a24565b91507f4d696e74696e6720696e2070726f67726573732e20506c65617365207761697460008301527f2e000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614758601583615a24565b91507f4661696c656420746f2073656e6420636f696e732e00000000000000000000006000830152602082019050919050565b6000614798601c83615a24565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b60006147d8600d83615a24565b91507f4d696e696d756d206f6620312e000000000000000000000000000000000000006000830152602082019050919050565b6000614818601283615a24565b91507f496e73756666696369656e742046756e647300000000000000000000000000006000830152602082019050919050565b6000614858602483615a24565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006148be601983615a24565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b60006148fe602b83615a24565b91507f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060008301527f77697468206661756365740000000000000000000000000000000000000000006020830152604082019050919050565b6000614964601d83615a24565b91507f547279696e6720746f207365742073616d65206d61782076616c75652e0000006000830152602082019050919050565b60006149a4602c83615a24565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000614a0a600f83615a24565b91507f31323820746f6b656e73206d61782e00000000000000000000000000000000006000830152602082019050919050565b6000614a4a601083615a24565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000614a8a601383615a24565b91507f55524920616c72656164792068696464656e2e000000000000000000000000006000830152602082019050919050565b6000614aca603883615a24565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b6000614b30602a83615a24565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b6000614b96602983615a24565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000614bfc602e83615a24565b91507f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008301527f6578697374656e7420746f6b656e0000000000000000000000000000000000006020830152604082019050919050565b6000614c62602083615a24565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000614ca2603183615a24565b91507f45524337323155524953746f726167653a2055524920717565727920666f722060008301527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006020830152604082019050919050565b6000614d08602c83615a24565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000614d6e600583615a35565b91507f2e6a736f6e0000000000000000000000000000000000000000000000000000006000830152600582019050919050565b6000614dae602083615a24565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614dee601183615a24565b91507f4e6f7420696e2077686974656c6973742e0000000000000000000000000000006000830152602082019050919050565b6000614e2e602983615a24565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000614e94602f83615a24565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000614efa601f83615a24565b91507f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006000830152602082019050919050565b6000614f3a601583615a24565b91507f55524920616c72656164792072657665616c65642e00000000000000000000006000830152602082019050919050565b6000614f7a601e83615a24565b91507f30203c3d205f70657263656e74616765526f79616c7479203c3d2031303000006000830152602082019050919050565b6000614fba601183615a24565b91507f546f6b656e20706f6f6c20656d707479210000000000000000000000000000006000830152602082019050919050565b6000614ffa602183615a24565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000615060600083615a19565b9150600082019050919050565b600061507a603183615a24565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b60006150e0601f83615a24565b91507f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006000830152602082019050919050565b6000615120601583615a24565b91507f416c726561647920696e2077686974656c6973742e00000000000000000000006000830152602082019050919050565b6000615160603483615a24565b91507f52656163686564206d6178696d756d20616d6f756e74206f6620746f6b656e2060008301527f616c6c6f7765642070657220616464726573732e0000000000000000000000006020830152604082019050919050565b60006151c6601a83615a24565b91507f4f776e6572206973206265796f6e642077686974656c6973742e0000000000006000830152602082019050919050565b61520281615bc9565b82525050565b61521181615bc9565b82525050565b61522861522382615bc9565b615c9a565b82525050565b600061523a828561449f565b60208201915061524a8284615217565b6020820191508190509392505050565b60006152668285614528565b91506152728284614528565b91508190509392505050565b600061528a8285614528565b91506152968284614528565b91506152a182614d61565b91508190509392505050565b60006152b882615053565b9150819050919050565b60006020820190506152d76000830184614414565b92915050565b60006080820190506152f26000830187614414565b6152ff6020830186614414565b61530c6040830185615208565b818103606083015261531e81846144b6565b905095945050505050565b600060408201905061533e6000830185614414565b61534b6020830184615208565b9392505050565b60006060820190506153676000830186614414565b6153746020830185615208565b818103604083015261538681846144b6565b9050949350505050565b600060208201905081810360008301526153aa8184614423565b905092915050565b60006020820190506153c76000830184614481565b92915050565b60006040820190506153e26000830185614490565b6153ef6020830184615208565b9392505050565b600060808201905061540b6000830187614490565b6154186020830186615208565b6154256040830185614414565b6154326060830184615208565b95945050505050565b6000602082019050818103600083015261545581846144ef565b905092915050565b6000602082019050818103600083015261547681614559565b9050919050565b6000602082019050818103600083015261549681614599565b9050919050565b600060208201905081810360008301526154b6816145d9565b9050919050565b600060208201905081810360008301526154d681614619565b9050919050565b600060208201905081810360008301526154f68161467f565b9050919050565b60006020820190508181036000830152615516816146e5565b9050919050565b600060208201905081810360008301526155368161474b565b9050919050565b600060208201905081810360008301526155568161478b565b9050919050565b60006020820190508181036000830152615576816147cb565b9050919050565b600060208201905081810360008301526155968161480b565b9050919050565b600060208201905081810360008301526155b68161484b565b9050919050565b600060208201905081810360008301526155d6816148b1565b9050919050565b600060208201905081810360008301526155f6816148f1565b9050919050565b6000602082019050818103600083015261561681614957565b9050919050565b6000602082019050818103600083015261563681614997565b9050919050565b60006020820190508181036000830152615656816149fd565b9050919050565b6000602082019050818103600083015261567681614a3d565b9050919050565b6000602082019050818103600083015261569681614a7d565b9050919050565b600060208201905081810360008301526156b681614abd565b9050919050565b600060208201905081810360008301526156d681614b23565b9050919050565b600060208201905081810360008301526156f681614b89565b9050919050565b6000602082019050818103600083015261571681614bef565b9050919050565b6000602082019050818103600083015261573681614c55565b9050919050565b6000602082019050818103600083015261575681614c95565b9050919050565b6000602082019050818103600083015261577681614cfb565b9050919050565b6000602082019050818103600083015261579681614da1565b9050919050565b600060208201905081810360008301526157b681614de1565b9050919050565b600060208201905081810360008301526157d681614e21565b9050919050565b600060208201905081810360008301526157f681614e87565b9050919050565b6000602082019050818103600083015261581681614eed565b9050919050565b6000602082019050818103600083015261583681614f2d565b9050919050565b6000602082019050818103600083015261585681614f6d565b9050919050565b6000602082019050818103600083015261587681614fad565b9050919050565b6000602082019050818103600083015261589681614fed565b9050919050565b600060208201905081810360008301526158b68161506d565b9050919050565b600060208201905081810360008301526158d6816150d3565b9050919050565b600060208201905081810360008301526158f681615113565b9050919050565b6000602082019050818103600083015261591681615153565b9050919050565b60006020820190508181036000830152615936816151b9565b9050919050565b60006020820190506159526000830184615208565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561597f5761597e615d62565b5b8060405250919050565b600067ffffffffffffffff8211156159a4576159a3615d62565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000615a4b82615bc9565b9150615a5683615bc9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615a8b57615a8a615cd5565b5b828201905092915050565b6000615aa182615bc9565b9150615aac83615bc9565b925082615abc57615abb615d04565b5b828204905092915050565b6000615ad282615bc9565b9150615add83615bc9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615b1657615b15615cd5565b5b828202905092915050565b6000615b2c82615bc9565b9150615b3783615bc9565b925082821015615b4a57615b49615cd5565b5b828203905092915050565b6000615b6082615ba9565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015615c00578082015181840152602081019050615be5565b83811115615c0f576000848401525b50505050565b60006002820490506001821680615c2d57607f821691505b60208210811415615c4157615c40615d33565b5b50919050565b6000615c5282615bc9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615c8557615c84615cd5565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000615caf82615bc9565b9150615cba83615bc9565b925082615cca57615cc9615d04565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b615dab81615b55565b8114615db657600080fd5b50565b615dc281615b67565b8114615dcd57600080fd5b50565b615dd981615b73565b8114615de457600080fd5b50565b615df081615b7d565b8114615dfb57600080fd5b50565b615e0781615bc9565b8114615e1257600080fd5b5056fea26469706673582212203a4cc929ee8c3d400524c7ecb6b7ea38ea15c454ee00cea9b5d553efdbc9446964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_tokenId": "- the NFT asset queried for royalty information",
          "_value": "- the sale price of the NFT asset specified by _tokenId"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for value sale price"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 527,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 529,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 533,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 537,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 541,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 547,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2966,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 79,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 387,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_paused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 273,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_owner",
        "offset": 1,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 472,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2876,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "_royalties",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(RoyaltyInfo)2843_storage"
      },
      {
        "astId": 2061,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "totalTokensRemaining",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2063,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "maxTokensAllowedPerAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2065,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "feeWei",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2068,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "listMintedTokensIds",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2070,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "hiddenURI",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 2072,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "newTokenId",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2074,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "baseURI",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 2076,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "temporaryURI",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 2078,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "keyHash",
        "offset": 0,
        "slot": "19",
        "type": "t_bytes32"
      },
      {
        "astId": 2080,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "feeLink",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2084,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "mapRequestIndexToAddress",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2088,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "mapIndexToTokenId",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2092,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "mapAddressToLatestTokenId",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2097,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "mapAddressToTokenIds",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2101,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "processingMint",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2105,
        "contract": "contracts/CuriousKid.sol:CuriousKid",
        "label": "inWhitelist",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)2843_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Base.RoyaltyInfo",
        "members": [
          {
            "astId": 2840,
            "contract": "contracts/CuriousKid.sol:CuriousKid",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2842,
            "contract": "contracts/CuriousKid.sol:CuriousKid",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}